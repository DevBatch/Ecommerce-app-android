buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}
def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
def gitTag = 'git describe --tags'.execute([], project.rootDir).text.trim()
def gitCommitCount = 100 +
        Integer.parseInt('git rev-list --count HEAD'.execute([], project.rootDir).text.trim())

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion "${rootProject.ext.androidBuildToolsVersion}"
    defaultConfig {
        applicationId "com.devbatch.ecommerce"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
//        versionCode rootProject.ext.releaseVersionCode
//        versionName "${rootProject.ext.releaseVersionName}"
        versionCode gitCommitCount
        versionName gitTag
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
        buildConfigField "int", "SELLER_ID", "${SELLER_ID}"//"Integer.valueOf("" + SELLER_ID).intValue()"
        buildConfigField "int", "STORE_ID", "${STORE_ID}"//"Integer.valueOf("" + STORE_ID).intValue()"
    }
    signingConfigs {
        release {
            storeFile file('/key.jks')
            storePassword "ecommerceapp"
            keyAlias "ecommerceapp"
            keyPassword "ecommerceapp"
        }
        debug {
            storeFile file('/debug.keystore')
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storePassword 'android'
        }
    }
    buildTypes {
        release {
//            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "boolean", "ENABLE_CRASH_REPORTING", "Boolean.parseBoolean(\"true\")"
            buildConfigField("String", "SERVER_MANIFEST_ENDPOINT", "\"${staging_api_manifest_endpoint}\"")

        }
        debug {
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "boolean", "ENABLE_CRASH_REPORTING", "Boolean.parseBoolean(\"false\")"
            buildConfigField("String", "SERVER_MANIFEST_ENDPOINT", "\"${production_api_manifest_endpoint}\"")
        }
        beta {
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "boolean", "ENABLE_CRASH_REPORTING", "Boolean.parseBoolean(\"false\")"
            buildConfigField "String", "END_POINT_LIVE", "\"http://thepizzapp.com/pizzAppAPI/Services/EService.svc/\""
            buildConfigField("String", "SERVER_MANIFEST_ENDPOINT", "\"${production_api_manifest_endpoint}\"")
            matchingFallbacks = ['release']
        }
        qualityassurance {
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "boolean", "ENABLE_CRASH_REPORTING", "Boolean.parseBoolean(\"true\")"
            buildConfigField("String", "SERVER_MANIFEST_ENDPOINT", "\"${staging_api_manifest_endpoint}\"")
            matchingFallbacks = ['debug']
        }

        applicationVariants.all { variant ->
            variant.outputs.all {
                outputFileName = "${variant.name}-${variant.versionName}.apk"
                String apkName = "ecommerceapp-";
                if (variant.buildType.name == "release") {
                    apkName += outputFileName;
                } else if (variant.buildType.name == "beta") {
                    apkName += outputFileName;
                } else if (variant.buildType.name == "debug") {
                    apkName += outputFileName;
                } else if (variant.buildType.name == "qualityassurance") {
                    apkName += outputFileName;
                }
                outputFileName = apkName;
//                variant.outputs[0].outputFile = new File(outputFileName, apkName)
            }
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')

    implementation project (":flexible-adapter")
    implementation 'com.android.support:design:27.0.2'
    implementation 'com.android.support:cardview-v7:27.0.2'
    implementation 'com.android.support:recyclerview-v7:27.0.2'
    implementation 'com.android.support:appcompat-v7:27.0.2'
    implementation 'com.android.support.constraint:constraint-layout:1.0.1'
//    testCompile 'junit:junit:4.12'
    implementation('com.crashlytics.sdk.android:crashlytics:2.6.5@aar') {
        transitive = true
    }
    implementation 'com.google.code.gson:gson:2.8.0'
    implementation 'com.github.bumptech.glide:glide:3.6.1'
    //compile 'com.squareup.okhttp:okhttp:2.7.0'
    //compile 'com.squareup.okhttp:okhttp-urlconnection:2.5.0'
    implementation 'de.greenrobot:eventbus:2.4.0'
    implementation 'de.hdodenhof:circleimageview:2.1.0'
    implementation 'com.googlecode.libphonenumber:libphonenumber:8.3.2'
    implementation 'com.crystal:crystalpreloaders:1.0.0'
    //compile 'com.squareup.okhttp:okhttp:2.5.0'
    implementation 'com.squareup.retrofit:retrofit:1.9.+'
    implementation 'com.squareup.okhttp:okhttp-urlconnection:2.5.0'

}
